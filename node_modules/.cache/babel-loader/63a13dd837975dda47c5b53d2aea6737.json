{"ast":null,"code":"var _jsxFileName = \"/Users/isalevine/flatiron/module-4-project/frontend-react/src/components/Canvas.js\";\nimport React, { Component } from 'react';\nimport { ActionCable } from 'react-actioncable-provider';\nimport { HEADERS, API_ROOT } from '../constants';\nimport { CompactPicker } from 'react-color';\n\nclass Canvas extends Component {\n  constructor() {\n    super();\n\n    this.draw = () => {\n      console.log(\"this.paths: \", this.paths); // this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n\n      this.paths.forEach(path => {\n        this.ctx.lineWidth = path.strokeWidth;\n        this.ctx.strokeStyle = path.color;\n        this.ctx.beginPath();\n        const list = path.list;\n        this.ctx.moveTo(list[0], list[1]);\n\n        for (let i = 2; i < list.length; i += 2) {\n          this.ctx.lineTo(list[i], list[i + 1]);\n        }\n\n        this.ctx.stroke();\n      });\n    };\n\n    this.makePath = () => {\n      return {\n        color: this.state.color,\n        list: [],\n        strokeWidth: 1\n      };\n    };\n\n    this.handleMouseUpOrLeave = () => {\n      this.drawing = false;\n      this.sendPaths();\n    };\n\n    this.handleMouseDown = () => {\n      this.paths.push(this.makePath());\n      this.drawing = true;\n    };\n\n    this.handleMouseMove = e => {\n      if (!this.drawing) return;\n      let x = ~~((e.clientX - this.rect.left) * 10) / 10;\n      let y = ~~((e.clientY - this.rect.top) * 10) / 10;\n      this.paths[this.paths.length - 1].list.push(x, y);\n      this.draw();\n    };\n\n    this.handleChangeComplete = color => {\n      this.setState({\n        color: color.hex\n      });\n    };\n\n    this.handleReceivedPaths = paths => {\n      console.log('handleReceivedPaths', paths);\n      this.paths = paths._json;\n      this.draw();\n    };\n\n    this.sendPaths = () => {\n      console.log('json', JSON.stringify(this.paths));\n      fetch(\"\".concat(API_ROOT, \"/canvas\"), {\n        method: \"POST\",\n        headers: HEADERS,\n        body: JSON.stringify(this.paths)\n      }).catch(err => {\n        console.log({\n          err\n        });\n      });\n    };\n\n    this.state = {\n      color: '#000000'\n    };\n    this.ctx = null;\n    this.rect = null;\n    this.canvas = null; // this.currentPosition = {x: 0, y: 0}\n    // this.previousPosition = {x: 0, y: 0}\n    //\n    // this.lineStart = {x: 0, y: 0}\n    // this.lineEnd = {x: 0, y: 0}\n\n    this.drawing = false;\n    this.paths = [];\n  }\n\n  componentDidMount() {\n    let canvas = document.getElementById(\"canvas\");\n    const ctx = canvas.getContext('2d');\n    this.ctx = ctx;\n    this.rect = canvas.getBoundingClientRect();\n    this.canvas = canvas;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(ActionCable, {\n      channel: {\n        channel: 'CanvasChannel'\n      },\n      onReceived: this.handleReceivedPaths,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(\"canvas\", {\n      id: \"canvas\",\n      onMouseUp: this.handleMouseUpOrLeave,\n      onMouseLeave: this.handleMouseUpOrLeave,\n      onMouseDown: this.handleMouseDown,\n      onMouseMove: this.handleMouseMove,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(CompactPicker, {\n      id: \"compact-picker\",\n      color: this.state.color,\n      onChangeComplete: this.handleChangeComplete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Canvas;","map":{"version":3,"sources":["/Users/isalevine/flatiron/module-4-project/frontend-react/src/components/Canvas.js"],"names":["React","Component","ActionCable","HEADERS","API_ROOT","CompactPicker","Canvas","constructor","draw","console","log","paths","forEach","path","ctx","lineWidth","strokeWidth","strokeStyle","color","beginPath","list","moveTo","i","length","lineTo","stroke","makePath","state","handleMouseUpOrLeave","drawing","sendPaths","handleMouseDown","push","handleMouseMove","e","x","clientX","rect","left","y","clientY","top","handleChangeComplete","setState","hex","handleReceivedPaths","_json","JSON","stringify","fetch","method","headers","body","catch","err","canvas","componentDidMount","document","getElementById","getContext","getBoundingClientRect","render","channel"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,WAAR,QAA0B,4BAA1B;AACA,SAAQC,OAAR,EAAiBC,QAAjB,QAAgC,cAAhC;AACA,SAASC,aAAT,QAA8B,aAA9B;;AAEA,MAAMC,MAAN,SAAqBL,SAArB,CAA+B;AAC7BM,EAAAA,WAAW,GAAI;AACb;;AADa,SA8BfC,IA9Be,GA8BR,MAAM;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4B,KAAKC,KAAjC,EADW,CAGX;;AACA,WAAKA,KAAL,CAAWC,OAAX,CAAmBC,IAAI,IAAI;AACzB,aAAKC,GAAL,CAASC,SAAT,GAAqBF,IAAI,CAACG,WAA1B;AACA,aAAKF,GAAL,CAASG,WAAT,GAAuBJ,IAAI,CAACK,KAA5B;AACA,aAAKJ,GAAL,CAASK,SAAT;AACA,cAAMC,IAAI,GAAGP,IAAI,CAACO,IAAlB;AACA,aAAKN,GAAL,CAASO,MAAT,CAAgBD,IAAI,CAAC,CAAD,CAApB,EAAyBA,IAAI,CAAC,CAAD,CAA7B;;AACA,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,IAAI,CAAtC,EAAyC;AACvC,eAAKR,GAAL,CAASU,MAAT,CAAgBJ,IAAI,CAACE,CAAD,CAApB,EAAyBF,IAAI,CAACE,CAAC,GAAG,CAAL,CAA7B;AACD;;AACD,aAAKR,GAAL,CAASW,MAAT;AACD,OAVD;AAWD,KA7Cc;;AAAA,SA+CfC,QA/Ce,GA+CJ,MAAM;AACf,aAAO;AACLR,QAAAA,KAAK,EAAE,KAAKS,KAAL,CAAWT,KADb;AAELE,QAAAA,IAAI,EAAE,EAFD;AAGLJ,QAAAA,WAAW,EAAE;AAHR,OAAP;AAKD,KArDc;;AAAA,SAuDfY,oBAvDe,GAuDQ,MAAM;AAC3B,WAAKC,OAAL,GAAe,KAAf;AACA,WAAKC,SAAL;AACD,KA1Dc;;AAAA,SA4DfC,eA5De,GA4DG,MAAM;AACtB,WAAKpB,KAAL,CAAWqB,IAAX,CAAgB,KAAKN,QAAL,EAAhB;AACA,WAAKG,OAAL,GAAe,IAAf;AACD,KA/Dc;;AAAA,SAiEfI,eAjEe,GAiEIC,CAAD,IAAO;AACvB,UAAI,CAAC,KAAKL,OAAV,EAAmB;AAEnB,UAAIM,CAAC,GAAG,CAAC,EAAE,CAACD,CAAC,CAACE,OAAF,GAAY,KAAKC,IAAL,CAAUC,IAAvB,IAA+B,EAAjC,CAAD,GAAwC,EAAhD;AACA,UAAIC,CAAC,GAAG,CAAC,EAAE,CAACL,CAAC,CAACM,OAAF,GAAY,KAAKH,IAAL,CAAUI,GAAvB,IAA8B,EAAhC,CAAD,GAAuC,EAA/C;AACA,WAAK9B,KAAL,CAAW,KAAKA,KAAL,CAAWY,MAAX,GAAoB,CAA/B,EAAkCH,IAAlC,CAAuCY,IAAvC,CAA4CG,CAA5C,EAA+CI,CAA/C;AACA,WAAK/B,IAAL;AACD,KAxEc;;AAAA,SA0EfkC,oBA1Ee,GA0ESxB,KAAD,IAAW;AAChC,WAAKyB,QAAL,CAAc;AACZzB,QAAAA,KAAK,EAAEA,KAAK,CAAC0B;AADD,OAAd;AAGD,KA9Ec;;AAAA,SAgFfC,mBAhFe,GAgFQlC,KAAD,IAAW;AAC/BF,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCC,KAAnC;AACA,WAAKA,KAAL,GAAaA,KAAK,CAACmC,KAAnB;AACA,WAAKtC,IAAL;AACD,KApFc;;AAAA,SAsFfsB,SAtFe,GAsFH,MAAM;AAChBrB,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBqC,IAAI,CAACC,SAAL,CAAe,KAAKrC,KAApB,CAApB;AACAsC,MAAAA,KAAK,WAAI7C,QAAJ,cAAuB;AAC1B8C,QAAAA,MAAM,EAAE,MADkB;AAE1BC,QAAAA,OAAO,EAAEhD,OAFiB;AAG1BiD,QAAAA,IAAI,EAAEL,IAAI,CAACC,SAAL,CAAe,KAAKrC,KAApB;AAHoB,OAAvB,CAAL,CAKC0C,KALD,CAKOC,GAAG,IAAI;AACZ7C,QAAAA,OAAO,CAACC,GAAR,CAAY;AAAC4C,UAAAA;AAAD,SAAZ;AACD,OAPD;AAQD,KAhGc;;AAEb,SAAK3B,KAAL,GAAa;AACXT,MAAAA,KAAK,EAAE;AADI,KAAb;AAIA,SAAKJ,GAAL,GAAW,IAAX;AACA,SAAKuB,IAAL,GAAY,IAAZ;AACA,SAAKkB,MAAL,GAAc,IAAd,CARa,CAUb;AACA;AACA;AACA;AACA;;AAEA,SAAK1B,OAAL,GAAe,KAAf;AAEA,SAAKlB,KAAL,GAAa,EAAb;AAED;;AAED6C,EAAAA,iBAAiB,GAAG;AAClB,QAAID,MAAM,GAAGE,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAb;AACA,UAAM5C,GAAG,GAAGyC,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ;AACA,SAAK7C,GAAL,GAAWA,GAAX;AACA,SAAKuB,IAAL,GAAYkB,MAAM,CAACK,qBAAP,EAAZ;AACA,SAAKL,MAAL,GAAcA,MAAd;AACD;;AAsEDM,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,WAAD;AACE,MAAA,OAAO,EAAE;AAACC,QAAAA,OAAO,EAAE;AAAV,OADX;AAEE,MAAA,UAAU,EAAE,KAAKjB,mBAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAKE;AACE,MAAA,EAAE,EAAC,QADL;AAEE,MAAA,SAAS,EAAE,KAAKjB,oBAFlB;AAGE,MAAA,YAAY,EAAE,KAAKA,oBAHrB;AAIE,MAAA,WAAW,EAAE,KAAKG,eAJpB;AAKE,MAAA,WAAW,EAAE,KAAKE,eALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,EAYE,oBAAC,aAAD;AACE,MAAA,EAAE,EAAC,gBADL;AAEE,MAAA,KAAK,EAAE,KAAKN,KAAL,CAAWT,KAFpB;AAGE,MAAA,gBAAgB,EAAE,KAAKwB,oBAHzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,CADF;AAoBD;;AAxH4B;;AA4H/B,eAAepC,MAAf","sourcesContent":["import React, {Component} from 'react';\nimport {ActionCable} from 'react-actioncable-provider';\nimport {HEADERS, API_ROOT} from '../constants';\nimport { CompactPicker } from 'react-color';\n\nclass Canvas extends Component {\n  constructor () {\n    super ()\n    this.state = {\n      color: '#000000'\n    }\n\n    this.ctx = null\n    this.rect = null\n    this.canvas = null\n\n    // this.currentPosition = {x: 0, y: 0}\n    // this.previousPosition = {x: 0, y: 0}\n    //\n    // this.lineStart = {x: 0, y: 0}\n    // this.lineEnd = {x: 0, y: 0}\n\n    this.drawing = false\n\n    this.paths = []\n\n  }\n\n  componentDidMount() {\n    let canvas = document.getElementById(\"canvas\");\n    const ctx = canvas.getContext('2d')\n    this.ctx = ctx\n    this.rect = canvas.getBoundingClientRect()\n    this.canvas = canvas\n  }\n\n  draw = () => {\n    console.log(\"this.paths: \", this.paths)\n\n    // this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n    this.paths.forEach(path => {\n      this.ctx.lineWidth = path.strokeWidth;\n      this.ctx.strokeStyle = path.color;\n      this.ctx.beginPath();\n      const list = path.list;\n      this.ctx.moveTo(list[0], list[1]);\n      for (let i = 2; i < list.length; i += 2) {\n        this.ctx.lineTo(list[i], list[i + 1]);\n      }\n      this.ctx.stroke();\n    })\n  }\n\n  makePath = () => {\n    return {\n      color: this.state.color,\n      list: [],\n      strokeWidth: 1\n    }\n  }\n\n  handleMouseUpOrLeave = () => {\n    this.drawing = false;\n    this.sendPaths();\n  }\n\n  handleMouseDown = () => {\n    this.paths.push(this.makePath());\n    this.drawing = true;\n  }\n\n  handleMouseMove = (e) => {\n    if (!this.drawing) return;\n\n    let x = ~~((e.clientX - this.rect.left) * 10) / 10\n    let y = ~~((e.clientY - this.rect.top) * 10) / 10\n    this.paths[this.paths.length - 1].list.push(x, y);\n    this.draw();\n  }\n\n  handleChangeComplete = (color) => {\n    this.setState({\n      color: color.hex\n    })\n  }\n\n  handleReceivedPaths = (paths) => {\n    console.log('handleReceivedPaths', paths)\n    this.paths = paths._json\n    this.draw()\n  }\n\n  sendPaths = () => {\n    console.log('json', JSON.stringify(this.paths))\n    fetch(`${API_ROOT}/canvas`, {\n      method: \"POST\",\n      headers: HEADERS,\n      body: JSON.stringify(this.paths)\n    })\n    .catch(err => {\n      console.log({err})\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <ActionCable\n          channel={{channel: 'CanvasChannel'}}\n          onReceived={this.handleReceivedPaths}\n        />\n        <canvas\n          id=\"canvas\"\n          onMouseUp={this.handleMouseUpOrLeave}\n          onMouseLeave={this.handleMouseUpOrLeave}\n          onMouseDown={this.handleMouseDown}\n          onMouseMove={this.handleMouseMove}\n        />\n        <CompactPicker\n          id=\"compact-picker\"\n          color={this.state.color}\n          onChangeComplete={this.handleChangeComplete}\n        />\n      </div>\n    )\n  }\n\n}\n\nexport default Canvas\n"]},"metadata":{},"sourceType":"module"}