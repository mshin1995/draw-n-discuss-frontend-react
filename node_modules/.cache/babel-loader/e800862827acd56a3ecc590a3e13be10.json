{"ast":null,"code":"var _jsxFileName = \"/Users/MattShin/Development/Labs/draw-n-discuss/frontend-react/src/components/ConversationsList.js\";\nimport React, { Component } from 'react';\nimport { ActionCable } from 'react-actioncable-provider';\nimport { API_ROOT } from '../constants';\nimport NewConversationForm from './NewConversationForm';\nimport MessagesArea from './MessagesArea';\nimport Cable from './Cable';\n\nclass ConversationsList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      conversations: [],\n      activeConversation: null\n    };\n\n    this.componentDidMount = () => {\n      fetch(\"\".concat(API_ROOT, \"/conversations\")).then(res => res.json()).then(conversations => this.setState({\n        conversations\n      }));\n    };\n\n    this.handleClick = id => {\n      this.setState({\n        activeConversation: id\n      });\n    };\n\n    this.handleReceivedConversation = response => {\n      const conversation = response.conversation;\n      this.setState({\n        conversations: [...this.state.conversations, conversation]\n      });\n    };\n\n    this.handleReceivedMessage = response => {\n      const message = response.message;\n      const conversations = [...this.state.conversations];\n      const conversation = conversations.find(conversation => conversation.id === message.conversation_id);\n      conversation.messages = [...conversation.messages, message];\n      this.setState({\n        conversations\n      });\n    };\n\n    this.render = () => {\n      const _this$state = this.state,\n            conversations = _this$state.conversations,\n            activeConversation = _this$state.activeConversation;\n      return React.createElement(\"div\", {\n        className: \"conversationsList\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(ActionCable, {\n        channel: {\n          channel: 'ConversationsChannel'\n        },\n        onReceived: this.handleReceivedConversation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"Conversations\"), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, mapConversations(conversations, this.handleClick)), React.createElement(NewConversationForm, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }), activeConversation ? React.createElement(MessagesArea, {\n        conversation: findActiveConversation(conversations, activeConversation),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }) : null);\n    };\n  }\n\n}\n\nexport default ConversationsList; // helpers\n\nconst findActiveConversation = (conversations, activeConversation) => {\n  return conversations.find(conversation => conversation.id === activeConversation);\n};\n\nconst mapConversations = (conversations, handleClick) => {\n  return conversations.map(conversation => {\n    return React.createElement(\"li\", {\n      key: conversation.id,\n      onClick: () => handleClick(conversation.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, conversation.title);\n  });\n};","map":{"version":3,"sources":["/Users/MattShin/Development/Labs/draw-n-discuss/frontend-react/src/components/ConversationsList.js"],"names":["React","Component","ActionCable","API_ROOT","NewConversationForm","MessagesArea","Cable","ConversationsList","state","conversations","activeConversation","componentDidMount","fetch","then","res","json","setState","handleClick","id","handleReceivedConversation","response","conversation","handleReceivedMessage","message","find","conversation_id","messages","render","channel","mapConversations","findActiveConversation","map","title"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {ActionCable} from 'react-actioncable-provider';\nimport {API_ROOT} from '../constants';\nimport NewConversationForm from './NewConversationForm'\nimport MessagesArea from './MessagesArea'\nimport Cable from './Cable'\n\n\nclass ConversationsList extends Component {\n\n  state = {\n    conversations: [],\n    activeConversation: null\n  };\n\n  componentDidMount = () => {\n    fetch(`${API_ROOT}/conversations`)\n    .then(res => res.json())\n    .then(conversations => this.setState({conversations}));\n  }\n\n  handleClick = id => {\n    this.setState({activeConversation: id})\n  }\n\n  handleReceivedConversation = response => {\n    const {conversation} = response;\n    this.setState({\n      conversations: [...this.state.conversations, conversation]\n    })\n  }\n\n  handleReceivedMessage = response => {\n    const {message} = response;\n    const conversations = [...this.state.conversations];\n    const conversation = conversations.find(conversation => conversation.id === message.conversation_id);\n    conversation.messages = [...conversation.messages, message];\n    this.setState({conversations})\n  }\n\n  render = () => {\n    const {conversations, activeConversation} = this.state;\n    return (\n      <div className=\"conversationsList\">\n        <ActionCable\n          channel={{channel: 'ConversationsChannel'}}\n          onReceived={this.handleReceivedConversation}\n        />\n        <h2>Conversations</h2>\n        <ul>{mapConversations(conversations, this.handleClick)}</ul>\n        <NewConversationForm />\n        {activeConversation ? (\n          <MessagesArea\n            conversation={findActiveConversation(\n              conversations,\n              activeConversation\n            )}\n          />\n        ) : null}\n      </div>\n    )\n  }\n\n}\n\nexport default ConversationsList;\n\n\n// helpers\n\nconst findActiveConversation = (conversations, activeConversation) => {\n  return conversations.find(\n    conversation => conversation.id === activeConversation\n  )\n}\n\nconst mapConversations = (conversations, handleClick) => {\n  return conversations.map(conversation => {\n    return (\n      <li key={conversation.id} onClick={() => handleClick(conversation.id)}>\n        {conversation.title}\n      </li>\n    )\n  })\n}\n"]},"metadata":{},"sourceType":"module"}