{"ast":null,"code":"var _jsxFileName = \"/Users/isalevine/flatiron/module-4-project/frontend-react/src/components/Canvas.js\";\nimport React, { Component } from 'react';\nimport { ActionCable } from 'react-actioncable-provider';\nimport { HEADERS, API_ROOT } from '../constants';\nimport { CompactPicker } from 'react-color';\nimport SaveDrawingButton from './SaveDrawingButton';\nimport ClearButton from './ClearButton';\n\nclass Canvas extends Component {\n  constructor() {\n    super();\n\n    this.draw = () => {\n      // this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n      this.state.paths.forEach(path => {\n        this.ctx.lineWidth = path.strokeWidth;\n        this.ctx.strokeStyle = path.color;\n        this.ctx.beginPath();\n        const list = path.list;\n        this.ctx.moveTo(list[0], list[1]);\n\n        for (let i = 2; i < list.length; i += 2) {\n          this.ctx.lineTo(list[i], list[i + 1]);\n        }\n\n        this.ctx.stroke();\n      });\n    };\n\n    this.makePath = () => {\n      return {\n        color: this.state.color,\n        list: [],\n        strokeWidth: this.state.value\n      };\n    };\n\n    this.handleMouseUpOrLeave = () => {\n      this.drawing = false;\n      this.sendPaths();\n    };\n\n    this.handleMouseDown = () => {\n      this.setState({\n        paths: [...this.state.paths, this.makePath()]\n      });\n      this.drawing = true;\n    };\n\n    this.handleMouseMove = e => {\n      if (!this.drawing) return;\n      let x = ~~((e.pageX - this.rect.left) * 10) / 10;\n      let y = ~~((e.pageY - this.rect.top) * 10) / 10;\n      this.paths[this.paths.length - 1].list.push(x, y);\n      this.draw();\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        value: event.target.value\n      });\n    };\n\n    this.handleChangeComplete = color => {\n      this.setState({\n        color: color.hex\n      });\n    };\n\n    this.handleReceivedPaths = paths => {\n      console.log('handleReceivedPaths', paths);\n      this.state.paths = paths._json;\n      this.draw();\n    };\n\n    this.sendPaths = () => {\n      // console.log('json', JSON.stringify(this.state.paths))\n      fetch(\"\".concat(API_ROOT, \"/canvas\"), {\n        method: \"POST\",\n        headers: HEADERS,\n        body: JSON.stringify(this.state.paths)\n      }).catch(err => {\n        console.log({\n          err\n        });\n      });\n    };\n\n    this.saveDrawing = () => {\n      // fetch to save drawing\n      // console.log('json', JSON.stringify(this.state.paths))\n      fetch(\"\".concat(API_ROOT, \"/saved_drawings\"), {\n        method: \"POST\",\n        headers: HEADERS,\n        body: JSON.stringify(this.state.paths)\n      }).catch(err => {\n        console.log({\n          err\n        });\n      });\n    };\n\n    this.clearDrawing = () => {\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); // this.paths = []\n\n      this.setState({\n        paths: []\n      });\n    };\n\n    this.state = {\n      color: '#000000',\n      value: 1,\n      paths: []\n    };\n    this.ctx = null;\n    this.rect = null;\n    this.canvas = null; // this.currentPosition = {x: 0, y: 0}\n    // this.previousPosition = {x: 0, y: 0}\n    //\n    // this.lineStart = {x: 0, y: 0}\n    // this.lineEnd = {x: 0, y: 0}\n\n    this.drawing = false; // this.paths = []\n  }\n\n  componentDidMount() {\n    let canvas = document.getElementById(\"canvas\");\n    const ctx = canvas.getContext('2d');\n    this.ctx = ctx;\n    this.rect = canvas.getBoundingClientRect();\n    this.canvas = canvas;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(ActionCable, {\n      channel: {\n        channel: 'CanvasChannel'\n      },\n      onReceived: this.handleReceivedPaths,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(\"canvas\", {\n      id: \"canvas\",\n      width: \"500\",\n      height: \"500\",\n      onMouseUp: this.handleMouseUpOrLeave,\n      onMouseLeave: this.handleMouseUpOrLeave,\n      onMouseDown: this.handleMouseDown,\n      onMouseMove: this.handleMouseMove,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(CompactPicker, {\n      color: this.state.color,\n      onChangeComplete: this.handleChangeComplete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      id: \"slider\",\n      type: \"range\",\n      list: \"tickmarks\",\n      min: \"1\",\n      max: \"10\",\n      value: this.state.value,\n      step: \"1\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(SaveDrawingButton, {\n      saveDrawing: this.saveDrawing,\n      paths: this.state.paths,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(ClearButton, {\n      clearDrawing: this.clearDrawing,\n      paths: this.state.paths,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Canvas;","map":{"version":3,"sources":["/Users/isalevine/flatiron/module-4-project/frontend-react/src/components/Canvas.js"],"names":["React","Component","ActionCable","HEADERS","API_ROOT","CompactPicker","SaveDrawingButton","ClearButton","Canvas","constructor","draw","state","paths","forEach","path","ctx","lineWidth","strokeWidth","strokeStyle","color","beginPath","list","moveTo","i","length","lineTo","stroke","makePath","value","handleMouseUpOrLeave","drawing","sendPaths","handleMouseDown","setState","handleMouseMove","e","x","pageX","rect","left","y","pageY","top","push","handleChange","event","target","handleChangeComplete","hex","handleReceivedPaths","console","log","_json","fetch","method","headers","body","JSON","stringify","catch","err","saveDrawing","clearDrawing","clearRect","canvas","width","height","componentDidMount","document","getElementById","getContext","getBoundingClientRect","render","channel"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {ActionCable} from 'react-actioncable-provider';\nimport {HEADERS, API_ROOT} from '../constants';\nimport { CompactPicker } from 'react-color';\n\nimport SaveDrawingButton from './SaveDrawingButton'\nimport ClearButton from './ClearButton'\n\n\nclass Canvas extends Component {\n  constructor () {\n    super ()\n    this.state = {\n      color: '#000000',\n      value: 1,\n      paths: []\n    }\n\n    this.ctx = null\n    this.rect = null\n    this.canvas = null\n\n    // this.currentPosition = {x: 0, y: 0}\n    // this.previousPosition = {x: 0, y: 0}\n    //\n    // this.lineStart = {x: 0, y: 0}\n    // this.lineEnd = {x: 0, y: 0}\n\n    this.drawing = false\n\n    // this.paths = []\n\n  }\n\n  componentDidMount() {\n    let canvas = document.getElementById(\"canvas\");\n    const ctx = canvas.getContext('2d')\n    this.ctx = ctx\n    this.rect = canvas.getBoundingClientRect()\n    this.canvas = canvas\n  }\n\n  draw = () => {\n    // this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n    this.state.paths.forEach(path => {\n      this.ctx.lineWidth = path.strokeWidth;\n      this.ctx.strokeStyle = path.color;\n      this.ctx.beginPath();\n      const list = path.list;\n      this.ctx.moveTo(list[0], list[1]);\n      for (let i = 2; i < list.length; i += 2) {\n        this.ctx.lineTo(list[i], list[i + 1]);\n      }\n      this.ctx.stroke();\n    })\n  }\n\n  makePath = () => {\n    return {\n      color: this.state.color,\n      list: [],\n      strokeWidth: this.state.value\n    }\n  }\n\n  handleMouseUpOrLeave = () => {\n    this.drawing = false;\n    this.sendPaths();\n  }\n\n  handleMouseDown = () => {\n    this.setState({paths: [...this.state.paths, this.makePath()]});\n    this.drawing = true;\n  }\n\n  handleMouseMove = (e) => {\n    if (!this.drawing) return;\n\n    let x = ~~((e.pageX - this.rect.left) * 10) / 10\n    let y = ~~((e.pageY - this.rect.top) * 10) / 10\n    this.paths[this.paths.length - 1].list.push(x, y);\n    this.draw();\n  }\n\n\n  handleChange = (event) => {\n    this.setState({\n      value: event.target.value\n    })\n  }\n\n\n  handleChangeComplete = (color) => {\n    this.setState({\n      color: color.hex\n    })\n  }\n\n  handleReceivedPaths = (paths) => {\n    console.log('handleReceivedPaths', paths)\n    this.state.paths = paths._json\n    this.draw()\n  }\n\n  sendPaths = () => {\n    // console.log('json', JSON.stringify(this.state.paths))\n    fetch(`${API_ROOT}/canvas`, {\n      method: \"POST\",\n      headers: HEADERS,\n      body: JSON.stringify(this.state.paths)\n    })\n    .catch(err => {\n      console.log({err})\n    })\n  }\n\n  saveDrawing = () => {\n    // fetch to save drawing\n    // console.log('json', JSON.stringify(this.state.paths))\n    fetch(`${API_ROOT}/saved_drawings`, {\n      method: \"POST\",\n      headers: HEADERS,\n      body: JSON.stringify(this.state.paths)\n    })\n    .catch(err => {\n      console.log({err})\n    })\n  }\n\n  clearDrawing = () => {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n    // this.paths = []\n    this.setState({paths: []})\n  }\n\n  render() {\n    return (\n      <div>\n        <ActionCable\n          channel={{channel: 'CanvasChannel'}}\n          onReceived={this.handleReceivedPaths}\n        />\n        <canvas\n          id=\"canvas\"\n          width=\"500\"\n          height=\"500\"\n          onMouseUp={this.handleMouseUpOrLeave}\n          onMouseLeave={this.handleMouseUpOrLeave}\n          onMouseDown={this.handleMouseDown}\n          onMouseMove={this.handleMouseMove}\n        />\n        <CompactPicker\n          color={this.state.color}\n          onChangeComplete={this.handleChangeComplete}\n        />\n\n        <input id=\"slider\" type=\"range\" list=\"tickmarks\" min=\"1\" max=\"10\" value={this.state.value} step=\"1\" onChange={this.handleChange}/>\n\n        <SaveDrawingButton saveDrawing={this.saveDrawing} paths={this.state.paths}/>\n        <ClearButton clearDrawing={this.clearDrawing} paths={this.state.paths}/>\n\n      </div>\n    )\n  }\n\n}\n\nexport default Canvas\n"]},"metadata":{},"sourceType":"module"}